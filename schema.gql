"""
The @specifiedBy built-in directive is used within the type system definition
language to provide a scalar specification URL for specifying the behavior of
custom scalar types.
"""
directive @specifiedBy(url: String!) on SCALAR

"""Authentication payload returned on successful login."""
type AuthPayload {
  token: String!
  user: User!
}

"""Item information."""
interface Item {
  id: ID!
}

type LatestResult {
  library: Library!
  items: [Item]
}

"""Library information."""
type Library {
  id: ID!
  name: String!
  type: String!
  language: String!
  locations: [String!]!
  createdAt: Time!
  updatedAt: Time!
  scannedAt: Time!
}

"""Item information about a movie."""
type Movie implements Item {
  id: ID!
  title: String!
  sortTitle: String!
  releaseDate: String
  summary: String
  thumb: String
  art: String
  createdAt: Time!
  updatedAt: Time!
}

"""Item information about a movie."""
type MusicAlbum implements Item {
  id: ID!
  title: String!
  sortTitle: String!
  releaseDate: String
  artist: Person
  thumb: String
  art: String
  createdAt: Time!
  updatedAt: Time!
}

type Mutation {
  completeOnboarding: ServerInfo

  """Authenticate user with the provided username and password."""
  login(username: String!, password: String!): AuthPayload!

  """Create a new user with the provided username and password."""
  register(username: String!, password: String!): AuthPayload!

  """
  Add a new library of the specified type, with the provided name, language and
  location. This will trigger a scan for all locations provided.
  """
  addLibrary(type: String!, name: String!, language: String!, locations: [String!]!): Library!
}

type Person implements Item {
  id: ID!
  name: String!
  sortName: String!
  type: String!
  birthDate: String
  deathDate: String
  summary: String
  thumb: String
  art: String
  createdAt: Time!
  updatedAt: Time!
}

type PhotoAlbum implements Item {
  id: ID!
  title: String!
  sortTitle: String!
  releaseDate: String
  thumb: String
  art: String
  createdAt: Time!
  updatedAt: Time!
}

type Query {
  serverInfo: ServerInfo!

  """Query the specified user."""
  user(id: ID!): User

  """Query all users."""
  users(limit: Int = 20, offset: Int = 0): [User]

  """Query latest content for all libraries."""
  latest(limit: Int = 20): [LatestResult]

  """Query the specified item."""
  item(id: ID!): Item

  """Query all items."""
  items(limit: Int = 20, offset: Int = 0, libraryId: ID!): [Item]

  """Query the children of the provided item."""
  children(limit: Int = 20, offset: Int = 0, item: ID!): [Item]

  """Query the specified library."""
  library(id: ID!): Library

  """Query all libraries."""
  libraries: [Library]
}

type ServerInfo {
  version: String!
  onboarding: Boolean!
}

type Subscription {
  newUpdateAvailable: UpdateInfo
  onLatestItemAdded: [LatestResult]
  onItemAdded: Item!
  onItemUpdated: Item!
  onLibraryAdded: Library!
}

scalar Time

type UpdateInfo {
  version: String!
  url: String!
}

"""User account information."""
type User {
  id: ID!
  username: String!
  createdAt: Time!
  updatedAt: Time!
}

